$borderTable: 1px solid #ccc;
$paddingSize: 12px;

$numberOfFrozenCols: 3;
$frozenContentWidth: 100px;
$frozenCellOffset: $frozenContentWidth + 2 * $paddingSize;
$timeCellWidth: 30px + 2 * $paddingSize;

@mixin table-cell {
    position: relative;
    z-index: 1;
    padding: $paddingSize;
    text-align: left;
    border-bottom: $borderTable;
}

@mixin frozen-cell {
    position: sticky;
    z-index: 10;
    @for $i from 1 through $numberOfFrozenCols {
        &:nth-child(#{$i}) {
            left: ($i - 1) * $frozenCellOffset;
        }
    }
    .fixedContent {
        width: $frozenContentWidth;
    }
    &.lastCell {
        border-right: $borderTable;
    }
}

$headingBackground: #f5f5f5;
$headingText: #333333;

* {
    font-family: Arial, sans-serif;
}

.container {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    gap: 12px;
    overflow-x: auto;
}

.table {
    width: 100%;
    border-collapse: collapse;

    .thead {
        background-color: $headingBackground;
        font-weight: bold;
        position: relative;
        z-index: 10;

        .tr .th {
            @include table-cell();
            background-color: $headingBackground;
            color: $headingText;
            & > .timelineTitle {
                width: max-content;
                position: sticky;
                z-index: 10;
                left: $numberOfFrozenCols * $frozenCellOffset + $paddingSize + $numberOfFrozenCols;
            }
            &.frozen {
                @include frozen-cell();
            }
            &.time {
                position: relative;
                &::before {
                    content: "";
                    position: absolute;
                    bottom: 0;
                    left: 50%;
                    width: 0px;
                    height: 8px;
                    transform: translateX(-50%);
                    border-left: $borderTable;
                    border-left-width: 2px;
                }
                & > div {
                    width: 30px;
                }
                & .vertLine {
                    position: absolute;
                    z-index: 10;
                    top: 100%;
                    left: 50%;
                    width: 0px;
                    transform: translateX(-50%);
                    border-left: $borderTable;
                    pointer-events: none;
                }

                $timeColor: #5ec5ad;
                &.hover {
                    color: $timeColor;
                }
                &.rangePoints {
                    color: $timeColor;
                    &.error {
                        color: #ff5959;
                    }
                }
            }
        }
    }

    .tbody {
        .tr {
            .td {
                @include table-cell();
                &.frozen {
                    @include frozen-cell();
                }
                &.timeCell {
                    padding: 0;
                    position: relative;
                    border-right: $borderTable;
                    border-right-width: 2px;
                    border-right-style: dashed;
                    overflow: hidden;
                    $arrowSize: 6px;
                    $arrowShift: 20px;
                    $arrowColor: #6aa1eb;
                    &::before {
                        content: "";
                        position: absolute;
                        top: 50%;
                        transition: transform 0.2s;
                        width: 0;
                        height: 0;
                        opacity: 0;
                        border-top: $arrowSize solid transparent;
                        border-bottom: $arrowSize solid transparent;
                    }
                    &.finish::before {
                        right: 0;
                        transform: translate(100%, -50%);
                        border-right: calc($arrowSize * 2) solid $arrowColor;
                    }
                    &.start::before {
                        left: 0;
                        transform: translate(-100%, -50%);
                        border-left: calc($arrowSize * 2) solid $arrowColor;
                    }
                    &.enabled.finish:not(.isNotCornerCell):hover::before,
                    &.enabled.finish.active::before {
                        opacity: 0.5;
                        transform: translate(-8px, -50%);
                    }
                    &.enabled.start:not(.isNotCornerCell):hover::before,
                    &.enabled.start.active::before {
                        opacity: 0.5;
                        transform: translate(8px, -50%);
                    }
                    &.borderless {
                        border-right: unset;
                    }
                    &.creating {
                        $creatingColor: #97dece;
                        $overlappingColor: #ff5959;

                        background-color: $creatingColor;
                        &.hideBorder {
                            border-right-color: $creatingColor;
                        }
                        &.overlapping {
                            background-color: $overlappingColor;
                            &.hideBorder {
                                border-right-color: $overlappingColor;
                            }
                        }
                    }
                    &:not(.withWork) {
                        cursor: cell;
                    }
                    .createdTime {
                        $borderRadius: 8px;
                        $vPadding: 6px;
                        $hPadding: 2px;

                        z-index: 50;
                        cursor: pointer;
                        position: absolute;
                        top: $vPadding;
                        bottom: $vPadding;
                        left: $hPadding;
                        right: $hPadding;
                        border-radius: $borderRadius;
                        cursor: pointer;

                        display: flex;
                        justify-content: flex-start;
                        align-items: center;
                        overflow: hidden;
                        background-color: #a0bfe0;
                        &:hover {
                            background-color: #8bb9eb;
                        }
                        .container {
                            margin: 8px;
                            font-size: 12px;
                            overflow: hidden;
                            position: relative;
                            word-break: break-all;
                        }
                    }
                }
            }
            color: #333333;
            &:nth-child(odd) .td {
                background-color: #f5f6f8;
            }
            &:nth-child(even) .td {
                background-color: #ffffff;
            }
            &:last-child .td {
                border-bottom: unset;
            }
        }
        .helperRow {
            visibility: hidden;
            td {
                padding: 0 $paddingSize;
            }
        }
    }
}

.errorMessage {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 12px;
    background-color: #f8d7da;
    color: #721c24;
    padding: 24px 10px;
    font-size: 16px;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    margin-bottom: 10px;
    strong {
        font-size: 22px;
        font-weight: bold;
    }
}
